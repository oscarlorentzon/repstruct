#!/usr/bin/env python

import os.path as op
import sys
sys.path.insert(0, op.abspath(op.join(op.dirname(__file__), "..")))

import argparse
from enum import Enum

from repstruct.analysis import process
from repstruct.analysis import kmeans
from repstruct.display import plothelper
from repstruct.features import sift, extract
from repstruct.retrieval.flickrwrapper import FlickrWrapper
from repstruct.dataset.dataset import DataSet


class RunMode(Enum):
    Download = 0
    Extract = 1
    Load = 2


class RsBundler:

    def __init__(self, api_key, tag):
        self.__data = DataSet(tag, op.abspath(op.join(op.dirname(__file__), '..')))
        self.__flickr = FlickrWrapper(api_key)

    def run(self):
        self.download()
        self.extract()
        self.process()
        self.plot_result()
        
    def download(self):
        self.__flickr.download(self.__data)

    def extract(self):
        sift.extract(self.__data)
        extract.extract(self.__data)

    def process(self):
        process.process(self.__data)
        process.closest(self.__data)
        kmeans.all_structures(self.__data)
        kmeans.score_structures(self.__data)

    def plot_result(self):
        images, pc_projections, pcs = self.__data.pca.load()
        closest_group, representative = process.load_closest(self.__data.analysis.path)
        structures = kmeans.load_scored_structures(self.__data.analysis.path)

        save_path = self.__data.plot.path if self.__data.plot.config.save_plot else None

        for pc_plot in self.__data.plot.config.pc_plots:
            plothelper.plot_pca_images(self.__data.collection.path, images, pc_projections, pc_plot[0], pc_plot[1],
                                       save_path=save_path, ticks=self.__data.plot.config.ticks,
                                       im_dim=self.__data.plot.config.image_dimension)

        plothelper.plot_result(self.__data.collection.path, images, closest_group, representative, save_path=save_path,
                               cols=self.__data.plot.config.columns, im_dim=self.__data.plot.config.image_dimension)

        plothelper.plot_structures(self.__data.collection.path, images, structures, save_path=save_path,
                                   cols=self.__data.plot.config.columns, im_dim=self.__data.plot.config.image_dimension)
 

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Runs the repstruct algorithm and plots the results.')
    parser.add_argument('tag', help='The flickr tag to search images for.')
    parser.add_argument('-a', '--api_key',
                        help='The flickr API key. Can also be supplied in a flickr_key.txt file at the root.')
    parser.add_argument('-r', '--run_mode',
                        help="""The run mode. Possible values:
                                d - Downloads, extracts, saves and processes images.
                                    This is the default.
                                e - Extracts, saves and processes images.
                                o - Loads saved data and processes images.""")

    args = parser.parse_args()

    if not args.api_key:
        with open(op.join(op.abspath(op.join(op.dirname(__file__), '..')), 'flickr_key.txt'), 'r') as f_out:
            args.api_key = f_out.readline().rstrip()

    if args.run_mode == 'e':
        args.run_mode = RunMode.Extract
    elif args.run_mode == 'o':
        args.run_mode = RunMode.Load
    else:
        args.run_mode = RunMode.Download

    bundler = RsBundler(args.api_key, args.tag)

    if args.run_mode == RunMode.Download:
        bundler.download()
        bundler.extract()
    elif args.run_mode == RunMode.Extract:
        bundler.extract()

    bundler.process()
    bundler.plot_result()